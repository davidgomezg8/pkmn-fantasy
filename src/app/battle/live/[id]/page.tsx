
'use client';

import { useEffect, useState } from 'react';

import { useParams, useSearchParams } from 'next/navigation';

import io, { Socket } from 'socket.io-client';

import HealthBar from '@/components/HealthBar';

import { Move } from '@/lib/battle';



export default function LiveBattlePage() {



  const params = useParams();



  const searchParams = useSearchParams();



  const battleId = params.id as string;



  const myTeamId = searchParams.get('myTeamId');



  const [socket, setSocket] = useState<Socket | null>(null);



    const [battleState, setBattleState] = useState<any>(null);



    const [menuState, setMenuState] = useState<'main' | 'moves' | 'switch'>('main');



  



    useEffect(() => {



  



      const newSocket = io();



  



      setSocket(newSocket);



  



  



  



      newSocket.on('connect', () => {



  



        console.log('Connected to socket server');



  



        newSocket.emit('joinBattle', battleId, myTeamId);



  



      });



  



  



  



            newSocket.on('updateState', (state) => {



  



  



  



              console.log('Received updateState event:', state);



  



  



  



              setBattleState(state);



  



  



  



              setMenuState('main'); // Reset menu state on battle state update



  



  



  



            });



  



  



  



      return () => {



  



        newSocket.disconnect();



  



      };



  



    }, [battleId, myTeamId]);



  



  



  



      const handleSelectMove = (move: string) => {



  



  



  



        console.log('Emitting selectMove:', { battleId, move });



  



  



  



        socket?.emit('selectMove', battleId, move);



  



  



  



      };



  



  



  



    



  



  



  



      const handleFightClick = () => {



  



  



  



        console.log('handleFightClick: Setting menuState to moves');



  



  



  



        setMenuState('moves');



  



  



  



      };



  



  



  



    



  



  



  



      const handleSwitchPokemonClick = () => {



  



  



  



        console.log('handleSwitchPokemonClick: Setting menuState to switch');



  



  



  



        setMenuState('switch');



  



  



  



      };



  



  



  



    



  



  



  



        const handleSwitchPokemon = (pokemonId: number) => {



  



  



  



    



  



  



  



          console.log('Emitting switchPokemon:', { battleId, pokemonId });



  



  



  



    



  



  



  



          console.log('Type of battleId before emitting switchPokemon:', typeof battleId);



  



  



  



    



  



  



  



          socket?.emit('switchPokemon', battleId, pokemonId);



  



  



  



    



  



  



  



          setMenuState('main'); // Go back to main menu after switching



  



  



  



    



  



  



  



        };



  



  



    if (!battleState || !myTeamId) {



  



      return <div>Loading...</div>;



  



    }



  



  



  



    const myPlayer = battleState.players[parseInt(myTeamId, 10)];



  



    const opponentPlayer = Object.values(battleState.players).find((p: any) => p.teamId !== parseInt(myTeamId, 10));



  



  



  



      if (!myPlayer || !opponentPlayer) {



  



  



  



    



  



  



  



        return <div>Waiting for opponent...</div>;



  



  



  



    



  



  



  



      }



  



  



  



    



  



  



  



      console.log('Current menuState:', menuState);



  



  



  



      console.log('myPlayer.activePokemon.moves:', myPlayer.activePokemon.moves);



  



  



  



    



  



  



  



      return (



  



  



  



    



  



  



  



        <div className="container mt-5 battle-container">



  



  



  



    



  



  



  



          <h1 className="mb-4 text-center">Combate en Vivo</h1>



  



  



  



    



  



  



  



          <div className="row battle-arena">



  



  



  



    



  



  



  



            {/* Opponent's side */}



  



  



  



    



  



  



  



            <div className="col-6 opponent-side">



  



  



  



    



  



  



  



              <div className="pokemon-display text-center">



  



  



  



    



  



  



  



                <h2>{opponentPlayer.activePokemon.name}</h2>



  



  



  



    



  



  



  



                <HealthBar currentHp={opponentPlayer.activePokemon.currentHp} maxHp={opponentPlayer.maxHp} />



  



  



  



    



  



  



  



                <img src={opponentPlayer.activePokemon.image} alt={opponentPlayer.activePokemon.name} className="img-fluid" />



  



  



  



    



  



  



  



              </div>



  



  



  



    



  



  



  



            </div>



  



  



  



    



  



  



  



    



  



  



  



    



  



  



  



            {/* Player's side */}



  



  



  



    



  



  



  



            <div className="col-6 player-side">



  



  



  



    



  



  



  



              <div className="pokemon-display text-center">



  



  



  



    



  



  



  



                <h2>{myPlayer.activePokemon.name}</h2>



  



  



  



    



  



  



  



                <HealthBar currentHp={myPlayer.activePokemon.currentHp} maxHp={myPlayer.maxHp} />



  



  



  



    



  



  



  



                <img src={myPlayer.activePokemon.image} alt={myPlayer.activePokemon.name} className="img-fluid" />



  



  



  



    



  



  



  



              </div>



  



  



  



    



  



  



  



            </div>



  



  



  



    



  



  



  



          </div>



  



  



  



    



  



  



  



    



  



  



  



    



  



  



  



          <div className="row battle-controls mt-4">



  



  



  



    



  



  



  



            <div className="col-12 text-center">



  



  



  



    



  



  



  



              {myPlayer && battleState.turn === myPlayer.teamId && (



  



  



  



    



  



  



  



                <div className="d-flex justify-content-center gap-3 flex-wrap">



  



  



  



    



  



  



  



                  {menuState === 'main' && (



  



  



  



    



  



  



  



                    <>



  



  



  



    



  



  



  



                      <button onClick={handleFightClick} className="btn btn-primary btn-lg">Luchar</button>



  



  



  



    



  



  



  



                      <button onClick={handleSwitchPokemonClick} className="btn btn-info btn-lg">Pokémon</button>



  



  



  



    



  



  



  



                    </>



  



  



  



    



  



  



  



                  )}



  



  



  



    



  



  



  



                  {menuState === 'moves' && (



  



  



  



    



  



  



  



                    <>



  



  



  



    



  



  



  



                      {myPlayer.activePokemon.moves.map((move: Move) => (



  



  



  



    



  



  



  



                        <button key={move.name} onClick={() => handleSelectMove(move.name)} className="btn btn-primary btn-lg">



  



  



  



    



  



  



  



                          {move.name}



  



  



  



    



  



  



  



                        </button>



  



  



  



    



  



  



  



                      ))}



  



  



  



    



  



  



  



                      <button onClick={() => setMenuState('main')} className="btn btn-secondary btn-lg">Atrás</button>



  



  



  



    



  



  



  



                    </>



  



  



  



    



  



  



  



                  )}



  



  



  



    



  



  



  



                                  {menuState === 'switch' && (



  



  



  



    



  



  



  



                                    <>



  



  



  



    



  



  



  



                                      {myPlayer.team.map((pokemon: any) => (



  



  



  



    



  



  



  



                                        <button 



  



  



  



    



  



  



  



                                          key={pokemon.id} 



  



  



  



    



  



  



  



                                          onClick={() => handleSwitchPokemon(pokemon.id)} // Call handleSwitchPokemon



  



  



  



    



  



  



  



                                          className="btn btn-warning btn-lg"



  



  



  



    



  



  



  



                                          disabled={pokemon.id === myPlayer.activePokemon.id} // Disable if already active



  



  



  



    



  



  



  



                                        >



  



  



  



    



  



  



  



                                          {pokemon.name} (HP: {pokemon.hp})



  



  



  



    



  



  



  



                                        </button>



  



  



  



    



  



  



  



                                      ))}



  



  



  



    



  



  



  



                                      <button onClick={() => setMenuState('main')} className="btn btn-secondary btn-lg">Atrás</button>



  



  



  



    



  



  



  



                                    </>



  



  



  



    



  



  



  



                                  )}



  



  



  



    



  



  



  



                  </div>



  



  



  



    



  



  



  



                )}



  



  



  



    



  



  



  



                {battleState.turn !== myPlayer.teamId && (



  



  



  



    



  



  



  



                  <p>Esperando al oponente...</p>



  



  



  



    



  



  



  



                )}



  



  



  



    



  



  



  



              </div>



  



  



  



    



  



  



  



            </div>



  



  



  



    



  



  



  



      



  



  



  



    



  



  



  



            <div className="row battle-log mt-4">



  



  



  



    



  



  



  



              <div className="col-12">



  



  



  



    



  



  



  



                <h2>Log de Combate</h2>



  



  



  



    



  



  



  



                <ul className="list-group">



  



  



  



    



  



  



  



                  {battleState.log.map((line: string, index: number) => (



  



  



  



    



  



  



  



                    <li key={index} className="list-group-item">{line}</li>



  



  



  



    



  



  



  



                  ))}



  



  



  



    



  



  



  



                </ul>



  



  



  



    



  



  



  



              </div>



  



  



  



    



  



  



  



            </div>



  



  



  



    



  



  



  



          </div>



  



  



  



    



  



  



  



        );



  



  



  



    



  



  



  



      }



  


