import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import prisma from '@/lib/prisma';
import { authOptions } from '@/lib/auth';

// Function to generate a unique 6-character alphanumeric code
const generateUniqueCode = async (): Promise<string> => {
  let code;
  let isUnique = false;
  while (!isUnique) {
    code = Math.random().toString(36).substring(2, 8).toUpperCase();
    const existingLeague = await prisma.league.findUnique({ where: { joinCode: code } });
    if (!existingLeague) {
      isUnique = true;
    }
  }
  return code;
};

export async function POST(request: Request) {
  const session = await getServerSession(authOptions);

  if (!session || !session.user) {
    return NextResponse.json({ message: 'No autorizado.' }, { status: 401 });
  }

  try {
    const { name, maxPlayers } = await request.json();
    const creatorId = parseInt(session.user.id as string, 10);

    if (!name || !maxPlayers) {
      return NextResponse.json({ message: 'Nombre de liga y número máximo de jugadores son requeridos.' }, { status: 400 });
    }

    if (isNaN(maxPlayers) || maxPlayers < 2 || maxPlayers > 10) { // Example limits
      return NextResponse.json({ message: 'El número máximo de jugadores debe ser entre 2 y 10.' }, { status: 400 });
    }

    const joinCode = await generateUniqueCode();

    const newLeague = await prisma.league.create({
      data: {
        name,
        creatorId,
        maxPlayers,
        joinCode,
      },
    });

    // Automatically add the creator as a member of their own league, if they don't already have one
    const existingCreatorTeam = await prisma.team.findFirst({
      where: {
        userId: creatorId,
        leagueId: newLeague.id,
      },
    });

    if (!existingCreatorTeam) {
      await prisma.team.create({
        data: {
          userId: creatorId,
          leagueId: newLeague.id,
        },
      });
    }

    // --- New Logic: Populate league with Pokémon ---
    // 1. Fetch a master list of Pokémon (e.g., from the seeded global pool)
    const masterPokemons = await prisma.pokemon.findMany({
      where: {
        leagueId: null, // Get pokemons not assigned to any league (our master list)
      },
      // Select only the fields needed to create a new Pokemon record
      select: {
        pokemonId: true,
        name: true,
        image: true,
        hp: true,
        attack: true,
        defense: true,
        specialAttack: true,
        specialDefense: true,
        speed: true,
        nickname: true, // Include nickname if it exists
        order: true,
        moves: true, // Include moves data
      },
    });

    console.log('[Create League API] Master Pokemons fetched (before createMany):', masterPokemons.length, masterPokemons.map(p => p.name));

    if (masterPokemons.length === 0) {
      // This is a critical error if the seed script hasn't run
      console.error('No master Pokémon found to populate the new league. Please run prisma db seed.');
      return NextResponse.json({ message: 'No se encontraron Pokémon base para poblar la liga. Contacte al administrador.' }, { status: 500 });
    }

    // 2. Create copies of these Pokémon for the new league
    const pokemonsToCreate = masterPokemons.map(({ id, ...rest }) => ({
      ...rest,
      leagueId: newLeague.id, // Assign to the new league
      teamId: null,           // Ensure they are not assigned to a team initially
      // The 'id' field will be auto-generated by Prisma
    }));

    console.log('[Create League API] Pokemons to create for new league:', pokemonsToCreate.length, pokemonsToCreate.map(p => p.name));

    await prisma.pokemon.createMany({
      data: pokemonsToCreate,
    });

    const remainingMasterPokemons = await prisma.pokemon.count({
      where: { leagueId: null },
    });
    console.log('[Create League API] Remaining master pokemons (after createMany):', remainingMasterPokemons);
    // --- End New Logic ---

    return NextResponse.json({ message: 'Liga creada exitosamente.', league: newLeague }, { status: 201 });

  } catch (error) {
    console.error('Error al crear la liga:', error);
    return NextResponse.json({ message: 'Error interno del servidor' }, { status: 500 });
  }
}